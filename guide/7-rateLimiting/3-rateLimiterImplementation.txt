Implementing Rate Limiting with `express-rate-limit`:
The `express-rate-limit` middleware helps you easily set up rate limiting in your Express.js application, allowing 
you to control the number of requests each client can make within a defined timeframe.

Code Explanation:
This section explains how to set up the rate limiter in your server using `express-rate-limit`.

Code Example:
-----------------------------------
import rateLimit from "express-rate-limit"; // Importing express-rate-limit middleware

// Setting up the rate limiter
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers
  legacyHeaders: false, // Disable the `X-RateLimit-*` headers
  message: "Too many requests from this IP, please try again after 15 minutes", // Message to send when limit is reached
});

// Applying rate limiter middleware to all requests
app.use(apiLimiter);
-----------------------------------

Step-by-Step Explanation:
1. **Importing express-rate-limit**: The first step is importing `express-rate-limit`, which provides the tools 
   to set up rate limiting.

2. **Setting Up the Rate Limiter (`apiLimiter`)**:
   - **`windowMs: 15 * 60 * 1000`**: This sets the time window to 15 minutes, meaning the rate limiter will track 
     requests for each IP within this timeframe.
   - **`max: 100`**: This defines the maximum number of requests allowed from a single IP within the time window. 
     If a client exceeds this limit, they will be blocked from making further requests until the window resets.
   - **`standardHeaders: true`**: This option returns rate limit information in the `RateLimit-*` headers, which 
     can be useful for clients to see how many requests they have left.
   - **`legacyHeaders: false`**: This disables the older `X-RateLimit-*` headers, opting for the newer standard.
   - **`message: "Too many requests from this IP, please try again after 15 minutes"`**: This message is sent 
     back to clients when they hit the rate limit, informing them that theyâ€™ve exceeded the allowed number of requests.

3. **Applying the Rate Limiter (`app.use(apiLimiter)`)**:
   - By applying `apiLimiter` globally, all incoming requests to your server are subjected to the rate limiting rules. 
     This helps protect your server from being overwhelmed by excessive traffic, ensuring consistent performance.

This setup enhances the security and stability of your application, providing a controlled environment where 
requests are managed efficiently. Rate limiting is a crucial tool for maintaining a healthy server environment, 
especially as your application grows and receives more traffic.
