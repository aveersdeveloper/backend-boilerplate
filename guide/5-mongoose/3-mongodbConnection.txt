Connecting to MongoDB with Mongoose:
To connect your Node.js application to MongoDB, Mongoose provides a simple and structured way to establish a 
connection, handle errors, and start your server once the connection is successful.

Code Explanation:
This section will guide you through each part of the connection code, explaining what each line does and why it’s 
important.

Code Example:
-----------------------------------
import mongoose from 'mongoose'; 
import express from 'express';

const app = express();
const port = process.env.PORT || 3000;

// Connecting to MongoDB using Mongoose
// The connect method is like asking the librarian (Mongoose) to set up access to the library (MongoDB) 
// so that your application can start interacting with the data.
mongoose.connect(process.env.MONGO_URI, {
  serverSelectionTimeoutMS: 5000, // Wait up to 5 seconds before timing out the connection attempt.
})
  .then(() => {
    console.log('MongoDB connected');
    app.listen(port, () => {
      console.log(`Server running on port ${port}`);
    });
  })
  .catch((error) => {
    console.error('MongoDB connection error:', error);
  });
-----------------------------------

Step-by-Step Explanation:
1. **mongoose.connect**: This function attempts to connect to the MongoDB database using the URL provided 
   in your environment variables. It sets up the "librarian" (Mongoose) to work with the "library" (MongoDB).
   
2. **process.env.MONGO_URI**: The connection string stored in environment variables, keeping your database 
   credentials secure and separate from your code. This is like having a key to the library stored safely 
   instead of hardcoding it.

3. **serverSelectionTimeoutMS: 5000**: This setting tells Mongoose to wait up to 5 seconds when trying to 
   connect to MongoDB. If the server isn’t reachable within this time, the connection attempt will fail. 
   It’s like waiting at the library door before deciding it's closed.

4. **.then() block**: This block runs when the connection is successful. Once connected, it logs “MongoDB connected” 
   and starts the server by listening on the specified port. It’s like opening the library doors and inviting 
   the public in.

5. **app.listen(port)**: Starts your application server, making it available on the specified port. It’s like 
   the library officially opening its doors for visitors.

6. **.catch() block**: Handles errors that occur during the connection process. If something goes wrong, 
   like the library being closed, it logs an error message with the details, helping you understand what went wrong.

This structured approach ensures your application is ready to handle database connections efficiently and 
gracefully handle any errors that may occur during the process.
